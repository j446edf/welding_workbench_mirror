

def getBCS(xi,tableData):
    '''
    Takes a table of data, tableData, and returns the interpolated values, yi, for given ordinate values, xi
    '''
    
    rowz,colz = tableData.shape
    rowzi = len(xi)
    tabVars = np.zeros([rowzi,colz])
    tabVars[:,0] = xi
    for i in range(1,colz):
        yi = np.interp(xi,tableData[:,0],tableData[:,i])
        #print(yi)
        tabVars[:,i] = yi

        
    #yi = np.interp(xi,tableData[:,0],tableData[:,1])
    #return yi
    return tabVars

def getDisplacement(vel_torch,HS0):
    '''
    Takes the velocity BCs and calculates the displacement BCs. Input the [t,V] data and output the [t,X] data. Displacement obtained by integrating velocity using trapezium rule.
    '''
    rowz,colz = vel_torch.shape
    disp_torch = np.zeros((rowz,colz))
    for j in range(1,colz):
        A_total=HS0[j-1]
        disp_torch[0][j] = A_total
        for i in range(1,rowz):
            dt = vel_torch[i][0] - vel_torch[i-1][0]
            dA=0.5*(vel_torch[i][j] + vel_torch[i-1][j])*dt
            A_total+=dA
            disp_torch[i][0] = vel_torch[i][0]
            disp_torch[i][j] = A_total
    return disp_torch


def getDeltaS(path_torch):
    '''
    Calculates the torch curvilinear displacement increments from the input path
    '''
    rowz,colz = path_torch.shape
    dS_torch = np.zeros((rowz,1))
    for i in range(0,rowz):
        if i == 0:
            dS_torch[i] = 0.
        else:
            dS_torch[i] = np.linalg.norm(path_torch[i] - path_torch[i-1])
    return dS_torch
    
def getCumS(dS_torch):
    '''
    Calculates the torch curvilinear displacement from the curvilinear displacement increments 
    '''
    rowz,colz = dS_torch.shape
    S_torch = np.zeros((rowz,colz))
    for i in range(0,rowz):
        if i == 0:
            S_torch[i] = dS_torch[i]
        else:
            S_torch[i] = dS_torch[i] + S_torch[i-1]
    return S_torch

def getMaxdSdt(vel_torch):
    '''
    Calculates maximum velocity of torch
    '''
    rowz,colz = vel_torch.shape
    dsdt = np.zeros((rowz,1))
    for i in range(0,rowz):
        dsdt[i] = np.linalg.norm(vel_torch[i][1:])
    max_dsdt=max(dsdt)
    return max_dsdt[0]

def getS_dsdt(dsdt_torch):
    '''
    Calculates the curvilinear displacement time history
    '''
    rowz,colz = dsdt_torch.shape
    Areas = np.zeros((rowz,colz))
    Area = 0.
    for i in range(1,rowz):
        dArea = 0.5 * (dsdt_torch[i-1][1] + dsdt_torch[i][1]) * (dsdt_torch[i][0] - dsdt_torch[i-1][0])
        Area+=dArea
        Areas[i][1] = Area
        Areas[i][0] = dsdt_torch[i][0]
    
    return Areas

def setTimesPath(S_torch,S_dsdt_torch):
    '''
    Interpolates the time base that satisfies the ds_dt profile and the path profile
    '''
    xp=S_dsdt_torch[:,0].tolist()
    yp=S_dsdt_torch[:,1].tolist()
    y=S_torch[:,0].tolist()
    for i in range(1,len(yp)):
        if yp[i] == yp[i-1]:
            yp[i] = yp[i]+0.0001
    x=np.interp(y,yp,xp)
    rowz,colz = S_torch.shape
    S_t_torch = np.zeros((rowz,2))
    for i in range(0,rowz):
        S_t_torch[i][0] = x[i] 
        S_t_torch[i][1] = S_torch[i][0]
    return S_t_torch
#############################
# Confirmed Functions
#############################
def getDirection(path_torch,dir_0):
    '''
    Calculates the tangential directions from the input path
    '''
    rowz,colz = path_torch.shape
    direction_torch = np.zeros((rowz,colz))
    for i in range(0,rowz):
        if i == 0:
            direction_torch[i] = dir_0
        else:
            if i == (rowz-1):
                direction_torch[i] = direction_torch[i-1]
            else:
                direction_torch[i] = path_torch[i] - path_torch[i-1]
#       if i == (rowz-1):
#           direction_torch[i] = direction_torch[i-1]
#       else:
#           direction_torch[i] = path_torch[i+1] - path_torch[i]
    return direction_torch


def getNormals(direction_torch,norm_0):
    '''
    Calculates the normal directions from the tangent and norm0.
    Normal to path of weld torch AND normal to Direction of weld torch
    '''
    rowz,colz = direction_torch.shape
    normals_torch = np.zeros((rowz,colz))
    for i in range(0,rowz):
        if i == 0:
            normals_torch[i] = norm_0
        else:
            if i == (rowz - 1):
                normals_torch[i] = normals_torch[i-1]
            else:
                normals_torch[i] = np.cross(direction_torch[i],direction_torch[i-1])
    return normals_torch
    
def getPathNormals(direction_torch,normals_torch):
    '''
    Calculates the normal directions from the tangent and norm0.
    Normal to path of weld torch BUT parallel to Direction of weld torch
    Inverse gradient of directions, i.e. direction m from y = mx +c then normal = 1/m
    '''
    rowz,colz = direction_torch.shape
    pathNormals_torch = np.zeros((rowz,colz))
    for i in range(0,rowz):
        #print(np.array(direction_torch[i]))
        #print(np.array(normals_torch[i]))
        #print(np.cross(np.array(normals_torch[i]),np.array(direction_torch[i])))
        pathNormals_torch[i] = np.cross(direction_torch[i],normals_torch[i])
    return pathNormals_torch
    
def getTangentNormals(direction_torch,pathNormals_torch):
    '''
    Calculates the normal directions from the tangent and norm0.
    Normal to path of weld torch BUT parallel to Direction of weld torch
    Inverse gradient of directions, i.e. direction m from y = mx +c then normal = 1/m
    '''
    rowz,colz = direction_torch.shape
    normals_torch = np.zeros((rowz,colz))
    for i in range(0,rowz):
        normals_torch[i] = np.cross(direction_torch[i],pathNormals_torch[i])
    return normals_torch
#############################
